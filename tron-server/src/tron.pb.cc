// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tron.proto

#include "tron.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tronol {
namespace protobuf {
class AccountCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountCommand>
      _instance;
} _AccountCommand_default_instance_;
class AccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountResponse>
      _instance;
} _AccountResponse_default_instance_;
class RoomCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomCommand>
      _instance;
} _RoomCommand_default_instance_;
class RoomResponse_RoomInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomResponse_RoomInfo>
      _instance;
} _RoomResponse_RoomInfo_default_instance_;
class RoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomResponse>
      _instance;
} _RoomResponse_default_instance_;
class GameCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCommand>
      _instance;
} _GameCommand_default_instance_;
class GameResponse_GameSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameResponse_GameSet>
      _instance;
} _GameResponse_GameSet_default_instance_;
class GameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameResponse>
      _instance;
} _GameResponse_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command>
      _instance;
} _Command_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response>
      _instance;
} _Response_default_instance_;
}  // namespace protobuf
}  // namespace tronol
namespace protobuf_tron_2eproto {
void InitDefaultsAccountCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tronol::protobuf::_AccountCommand_default_instance_;
    new (ptr) ::tronol::protobuf::AccountCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::AccountCommand::InitAsDefaultInstance();
}

void InitDefaultsAccountCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccountCommandImpl);
}

void InitDefaultsAccountResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tronol::protobuf::_AccountResponse_default_instance_;
    new (ptr) ::tronol::protobuf::AccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::AccountResponse::InitAsDefaultInstance();
}

void InitDefaultsAccountResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAccountResponseImpl);
}

void InitDefaultsRoomCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tronol::protobuf::_RoomCommand_default_instance_;
    new (ptr) ::tronol::protobuf::RoomCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::RoomCommand::InitAsDefaultInstance();
}

void InitDefaultsRoomCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomCommandImpl);
}

void InitDefaultsRoomResponse_RoomInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tronol::protobuf::_RoomResponse_RoomInfo_default_instance_;
    new (ptr) ::tronol::protobuf::RoomResponse_RoomInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::RoomResponse_RoomInfo::InitAsDefaultInstance();
}

void InitDefaultsRoomResponse_RoomInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomResponse_RoomInfoImpl);
}

void InitDefaultsRoomResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tron_2eproto::InitDefaultsRoomResponse_RoomInfo();
  {
    void* ptr = &::tronol::protobuf::_RoomResponse_default_instance_;
    new (ptr) ::tronol::protobuf::RoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::RoomResponse::InitAsDefaultInstance();
}

void InitDefaultsRoomResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoomResponseImpl);
}

void InitDefaultsGameCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tronol::protobuf::_GameCommand_default_instance_;
    new (ptr) ::tronol::protobuf::GameCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::GameCommand::InitAsDefaultInstance();
}

void InitDefaultsGameCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCommandImpl);
}

void InitDefaultsGameResponse_GameSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tronol::protobuf::_GameResponse_GameSet_default_instance_;
    new (ptr) ::tronol::protobuf::GameResponse_GameSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::GameResponse_GameSet::InitAsDefaultInstance();
}

void InitDefaultsGameResponse_GameSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameResponse_GameSetImpl);
}

void InitDefaultsGameResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tron_2eproto::InitDefaultsGameResponse_GameSet();
  {
    void* ptr = &::tronol::protobuf::_GameResponse_default_instance_;
    new (ptr) ::tronol::protobuf::GameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::GameResponse::InitAsDefaultInstance();
}

void InitDefaultsGameResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameResponseImpl);
}

void InitDefaultsCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tron_2eproto::InitDefaultsAccountCommand();
  protobuf_tron_2eproto::InitDefaultsRoomCommand();
  protobuf_tron_2eproto::InitDefaultsGameCommand();
  {
    void* ptr = &::tronol::protobuf::_Command_default_instance_;
    new (ptr) ::tronol::protobuf::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::Command::InitAsDefaultInstance();
}

void InitDefaultsCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommandImpl);
}

void InitDefaultsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tron_2eproto::InitDefaultsAccountResponse();
  protobuf_tron_2eproto::InitDefaultsRoomResponse();
  protobuf_tron_2eproto::InitDefaultsGameResponse();
  {
    void* ptr = &::tronol::protobuf::_Response_default_instance_;
    new (ptr) ::tronol::protobuf::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tronol::protobuf::Response::InitAsDefaultInstance();
}

void InitDefaultsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountCommand, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountCommand, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountCommand, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountCommand, token_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::AccountResponse, token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomCommand, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomCommand, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomCommand, wins_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse_RoomInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse_RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse_RoomInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse_RoomInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse_RoomInfo, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse_RoomInfo, status_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::RoomResponse, room_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameCommand, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameCommand, dir_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse_GameSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse_GameSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse_GameSet, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse_GameSet, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse_GameSet, v_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse, set_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::GameResponse, winner_),
  1,
  ~0u,
  ~0u,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Command, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Command, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Command, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Command, game_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Response, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Response, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Response, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tronol::protobuf::Response, game_),
  3,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::tronol::protobuf::AccountCommand)},
  { 15, 22, sizeof(::tronol::protobuf::AccountResponse)},
  { 24, 33, sizeof(::tronol::protobuf::RoomCommand)},
  { 37, 46, sizeof(::tronol::protobuf::RoomResponse_RoomInfo)},
  { 50, 58, sizeof(::tronol::protobuf::RoomResponse)},
  { 61, 69, sizeof(::tronol::protobuf::GameCommand)},
  { 72, 80, sizeof(::tronol::protobuf::GameResponse_GameSet)},
  { 83, 93, sizeof(::tronol::protobuf::GameResponse)},
  { 98, 107, sizeof(::tronol::protobuf::Command)},
  { 111, 120, sizeof(::tronol::protobuf::Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_AccountCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_AccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_RoomCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_RoomResponse_RoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_RoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_GameCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_GameResponse_GameSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_GameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tronol::protobuf::_Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tron.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntron.proto\022\017tronol.protobuf\"\302\001\n\016Accoun"
      "tCommand\0229\n\004type\030\001 \002(\0162+.tronol.protobuf"
      ".AccountCommand.CommandType\022\020\n\010username\030"
      "\002 \002(\t\022\020\n\010password\030\003 \001(\t\022\020\n\010nickname\030\004 \001("
      "\t\022\r\n\005token\030\005 \001(\t\"0\n\013CommandType\022\014\n\010REGIS"
      "TER\020\000\022\t\n\005LOGIN\020\001\022\010\n\004EDIT\020\002\"\271\001\n\017AccountRe"
      "sponse\022;\n\004type\030\001 \002(\0162-.tronol.protobuf.A"
      "ccountResponse.ResponseType\022\r\n\005token\030\002 \001"
      "(\t\"Z\n\014ResponseType\022\013\n\007SUCCESS\020\000\022\024\n\020INVAL"
      "ID_USERNAME\020\001\022\024\n\020INVALID_PASSWORD\020\002\022\021\n\rI"
      "NVALID_TOKEN\020\003\"\262\001\n\013RoomCommand\0226\n\004type\030\001"
      " \002(\0162(.tronol.protobuf.RoomCommand.Comma"
      "ndType\022\n\n\002id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004wins"
      "\030\004 \001(\005\"C\n\013CommandType\022\n\n\006CREATE\020\000\022\010\n\004EDI"
      "T\020\001\022\010\n\004LIST\020\002\022\t\n\005ENTER\020\003\022\t\n\005LEAVE\020\004\"\375\001\n\014"
      "RoomResponse\0228\n\004type\030\001 \002(\0162*.tronol.prot"
      "obuf.RoomResponse.ResponseType\022\n\n\002id\030\002 \001"
      "(\005\0224\n\004room\030\003 \003(\0132&.tronol.protobuf.RoomR"
      "esponse.RoomInfo\032B\n\010RoomInfo\022\n\n\002id\030\001 \002(\005"
      "\022\014\n\004name\030\002 \002(\t\022\014\n\004host\030\003 \001(\t\022\016\n\006status\030\004"
      " \001(\t\"-\n\014ResponseType\022\013\n\007SUCCESS\020\000\022\020\n\014INV"
      "ALID_ROOM\020\001\"\230\001\n\013GameCommand\0226\n\004type\030\001 \002("
      "\0162(.tronol.protobuf.GameCommand.CommandT"
      "ype\022\014\n\004tick\030\002 \001(\005\022\013\n\003dir\030\003 \003(\005\"6\n\013Comman"
      "dType\022\010\n\004ROOM\020\000\022\010\n\004GAME\020\001\022\t\n\005START\020\002\022\010\n\004"
      "QUIT\020\003\"\236\002\n\014GameResponse\0228\n\004type\030\001 \002(\0162*."
      "tronol.protobuf.GameResponse.ResponseTyp"
      "e\0225\n\006set_at\030\002 \003(\0132%.tronol.protobuf.Game"
      "Response.GameSet\022\r\n\005users\030\003 \003(\t\022\014\n\004tick\030"
      "\004 \001(\005\022\016\n\006winner\030\005 \001(\t\032*\n\007GameSet\022\t\n\001x\030\001 "
      "\002(\005\022\t\n\001y\030\002 \002(\005\022\t\n\001v\030\003 \002(\005\"D\n\014ResponseTyp"
      "e\022\013\n\007SUCCESS\020\000\022\t\n\005ERROR\020\001\022\010\n\004ROOM\020\002\022\010\n\004G"
      "AME\020\003\022\010\n\004OVER\020\004\"\367\001\n\007Command\0222\n\004type\030\001 \002("
      "\0162$.tronol.protobuf.Command.CommandType\022"
      "0\n\007account\030\002 \001(\0132\037.tronol.protobuf.Accou"
      "ntCommand\022*\n\004room\030\003 \001(\0132\034.tronol.protobu"
      "f.RoomCommand\022*\n\004game\030\004 \001(\0132\034.tronol.pro"
      "tobuf.GameCommand\".\n\013CommandType\022\013\n\007ACCO"
      "UNT\020\000\022\010\n\004ROOM\020\001\022\010\n\004GAME\020\002\"\376\001\n\010Response\0224"
      "\n\004type\030\001 \002(\0162&.tronol.protobuf.Response."
      "ResponseType\0221\n\007account\030\002 \001(\0132 .tronol.p"
      "rotobuf.AccountResponse\022+\n\004room\030\003 \001(\0132\035."
      "tronol.protobuf.RoomResponse\022+\n\004game\030\004 \001"
      "(\0132\035.tronol.protobuf.GameResponse\"/\n\014Res"
      "ponseType\022\013\n\007ACCOUNT\020\000\022\010\n\004ROOM\020\001\022\010\n\004GAME"
      "\020\002B&\n\030ca.zihao.tronol.protobufB\nTronProt"
      "os"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tron.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tron_2eproto
namespace tronol {
namespace protobuf {
const ::google::protobuf::EnumDescriptor* AccountCommand_CommandType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[0];
}
bool AccountCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AccountCommand_CommandType AccountCommand::REGISTER;
const AccountCommand_CommandType AccountCommand::LOGIN;
const AccountCommand_CommandType AccountCommand::EDIT;
const AccountCommand_CommandType AccountCommand::CommandType_MIN;
const AccountCommand_CommandType AccountCommand::CommandType_MAX;
const int AccountCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AccountResponse_ResponseType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[1];
}
bool AccountResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AccountResponse_ResponseType AccountResponse::SUCCESS;
const AccountResponse_ResponseType AccountResponse::INVALID_USERNAME;
const AccountResponse_ResponseType AccountResponse::INVALID_PASSWORD;
const AccountResponse_ResponseType AccountResponse::INVALID_TOKEN;
const AccountResponse_ResponseType AccountResponse::ResponseType_MIN;
const AccountResponse_ResponseType AccountResponse::ResponseType_MAX;
const int AccountResponse::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoomCommand_CommandType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[2];
}
bool RoomCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoomCommand_CommandType RoomCommand::CREATE;
const RoomCommand_CommandType RoomCommand::EDIT;
const RoomCommand_CommandType RoomCommand::LIST;
const RoomCommand_CommandType RoomCommand::ENTER;
const RoomCommand_CommandType RoomCommand::LEAVE;
const RoomCommand_CommandType RoomCommand::CommandType_MIN;
const RoomCommand_CommandType RoomCommand::CommandType_MAX;
const int RoomCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoomResponse_ResponseType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[3];
}
bool RoomResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoomResponse_ResponseType RoomResponse::SUCCESS;
const RoomResponse_ResponseType RoomResponse::INVALID_ROOM;
const RoomResponse_ResponseType RoomResponse::ResponseType_MIN;
const RoomResponse_ResponseType RoomResponse::ResponseType_MAX;
const int RoomResponse::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GameCommand_CommandType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[4];
}
bool GameCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameCommand_CommandType GameCommand::ROOM;
const GameCommand_CommandType GameCommand::GAME;
const GameCommand_CommandType GameCommand::START;
const GameCommand_CommandType GameCommand::QUIT;
const GameCommand_CommandType GameCommand::CommandType_MIN;
const GameCommand_CommandType GameCommand::CommandType_MAX;
const int GameCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GameResponse_ResponseType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[5];
}
bool GameResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameResponse_ResponseType GameResponse::SUCCESS;
const GameResponse_ResponseType GameResponse::ERROR;
const GameResponse_ResponseType GameResponse::ROOM;
const GameResponse_ResponseType GameResponse::GAME;
const GameResponse_ResponseType GameResponse::OVER;
const GameResponse_ResponseType GameResponse::ResponseType_MIN;
const GameResponse_ResponseType GameResponse::ResponseType_MAX;
const int GameResponse::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[6];
}
bool Command_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Command_CommandType Command::ACCOUNT;
const Command_CommandType Command::ROOM;
const Command_CommandType Command::GAME;
const Command_CommandType Command::CommandType_MIN;
const Command_CommandType Command::CommandType_MAX;
const int Command::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor() {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tron_2eproto::file_level_enum_descriptors[7];
}
bool Response_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_ResponseType Response::ACCOUNT;
const Response_ResponseType Response::ROOM;
const Response_ResponseType Response::GAME;
const Response_ResponseType Response::ResponseType_MIN;
const Response_ResponseType Response::ResponseType_MAX;
const int Response::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void AccountCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountCommand::kTypeFieldNumber;
const int AccountCommand::kUsernameFieldNumber;
const int AccountCommand::kPasswordFieldNumber;
const int AccountCommand::kNicknameFieldNumber;
const int AccountCommand::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountCommand::AccountCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsAccountCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.AccountCommand)
}
AccountCommand::AccountCommand(const AccountCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.AccountCommand)
}

void AccountCommand::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AccountCommand::~AccountCommand() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.AccountCommand)
  SharedDtor();
}

void AccountCommand::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountCommand::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountCommand& AccountCommand::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsAccountCommand();
  return *internal_default_instance();
}

AccountCommand* AccountCommand::New(::google::protobuf::Arena* arena) const {
  AccountCommand* n = new AccountCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.AccountCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.AccountCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.AccountCommand.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::AccountCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::AccountCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.AccountCommand.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.AccountCommand.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.AccountCommand.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.AccountCommand.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.AccountCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.AccountCommand)
  return false;
#undef DO_
}

void AccountCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.AccountCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.AccountCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string nickname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional string token = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.AccountCommand)
}

::google::protobuf::uint8* AccountCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.AccountCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.AccountCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string nickname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional string token = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountCommand.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.AccountCommand)
  return target;
}

size_t AccountCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tronol.protobuf.AccountCommand)
  size_t total_size = 0;

  if (has_username()) {
    // required string username = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_type()) {
    // required .tronol.protobuf.AccountCommand.CommandType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t AccountCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.AccountCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string username = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required .tronol.protobuf.AccountCommand.CommandType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.AccountCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.AccountCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.AccountCommand)
    MergeFrom(*source);
  }
}

void AccountCommand::MergeFrom(const AccountCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.AccountCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.AccountCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCommand::CopyFrom(const AccountCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.AccountCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  return true;
}

void AccountCommand::Swap(AccountCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountCommand::InternalSwap(AccountCommand* other) {
  using std::swap;
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  nickname_.Swap(&other->nickname_);
  token_.Swap(&other->token_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountCommand::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountResponse::kTypeFieldNumber;
const int AccountResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountResponse::AccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsAccountResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.AccountResponse)
}
AccountResponse::AccountResponse(const AccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.AccountResponse)
}

void AccountResponse::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AccountResponse::~AccountResponse() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.AccountResponse)
  SharedDtor();
}

void AccountResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountResponse::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountResponse& AccountResponse::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsAccountResponse();
  return *internal_default_instance();
}

AccountResponse* AccountResponse::New(::google::protobuf::Arena* arena) const {
  AccountResponse* n = new AccountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.AccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*token_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.AccountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.AccountResponse.ResponseType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::AccountResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::AccountResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.AccountResponse.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.AccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.AccountResponse)
  return false;
#undef DO_
}

void AccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.AccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.AccountResponse.ResponseType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountResponse.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.AccountResponse)
}

::google::protobuf::uint8* AccountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.AccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.AccountResponse.ResponseType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.AccountResponse.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.AccountResponse)
  return target;
}

size_t AccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.AccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .tronol.protobuf.AccountResponse.ResponseType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional string token = 2;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.AccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.AccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.AccountResponse)
    MergeFrom(*source);
  }
}

void AccountResponse::MergeFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.AccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.AccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountResponse::CopyFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.AccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void AccountResponse::Swap(AccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountResponse::InternalSwap(AccountResponse* other) {
  using std::swap;
  token_.Swap(&other->token_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountResponse::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomCommand::kTypeFieldNumber;
const int RoomCommand::kIdFieldNumber;
const int RoomCommand::kNameFieldNumber;
const int RoomCommand::kWinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomCommand::RoomCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsRoomCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.RoomCommand)
}
RoomCommand::RoomCommand(const RoomCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&wins_) -
    reinterpret_cast<char*>(&type_)) + sizeof(wins_));
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.RoomCommand)
}

void RoomCommand::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wins_) -
      reinterpret_cast<char*>(&type_)) + sizeof(wins_));
}

RoomCommand::~RoomCommand() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.RoomCommand)
  SharedDtor();
}

void RoomCommand::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCommand::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomCommand& RoomCommand::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsRoomCommand();
  return *internal_default_instance();
}

RoomCommand* RoomCommand::New(::google::protobuf::Arena* arena) const {
  RoomCommand* n = new RoomCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.RoomCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wins_) -
        reinterpret_cast<char*>(&type_)) + sizeof(wins_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.RoomCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.RoomCommand.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::RoomCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::RoomCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.RoomCommand.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wins = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.RoomCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.RoomCommand)
  return false;
#undef DO_
}

void RoomCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.RoomCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.RoomCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomCommand.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 wins = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wins(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.RoomCommand)
}

::google::protobuf::uint8* RoomCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.RoomCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.RoomCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomCommand.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 wins = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wins(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.RoomCommand)
  return target;
}

size_t RoomCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.RoomCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .tronol.protobuf.RoomCommand.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional string name = 3;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 wins = 4;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wins());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.RoomCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.RoomCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.RoomCommand)
    MergeFrom(*source);
  }
}

void RoomCommand::MergeFrom(const RoomCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.RoomCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      wins_ = from.wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoomCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.RoomCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCommand::CopyFrom(const RoomCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.RoomCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void RoomCommand::Swap(RoomCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomCommand::InternalSwap(RoomCommand* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(wins_, other->wins_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomCommand::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomResponse_RoomInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomResponse_RoomInfo::kIdFieldNumber;
const int RoomResponse_RoomInfo::kNameFieldNumber;
const int RoomResponse_RoomInfo::kHostFieldNumber;
const int RoomResponse_RoomInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomResponse_RoomInfo::RoomResponse_RoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsRoomResponse_RoomInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.RoomResponse.RoomInfo)
}
RoomResponse_RoomInfo::RoomResponse_RoomInfo(const RoomResponse_RoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status()) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.RoomResponse.RoomInfo)
}

void RoomResponse_RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

RoomResponse_RoomInfo::~RoomResponse_RoomInfo() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.RoomResponse.RoomInfo)
  SharedDtor();
}

void RoomResponse_RoomInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomResponse_RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomResponse_RoomInfo::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomResponse_RoomInfo& RoomResponse_RoomInfo::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsRoomResponse_RoomInfo();
  return *internal_default_instance();
}

RoomResponse_RoomInfo* RoomResponse_RoomInfo::New(::google::protobuf::Arena* arena) const {
  RoomResponse_RoomInfo* n = new RoomResponse_RoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomResponse_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.RoomResponse.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*status_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomResponse_RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.RoomResponse.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.RoomResponse.RoomInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.RoomResponse.RoomInfo.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.RoomResponse.RoomInfo.status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.RoomResponse.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.RoomResponse.RoomInfo)
  return false;
#undef DO_
}

void RoomResponse_RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.RoomResponse.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomResponse.RoomInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string host = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomResponse.RoomInfo.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->host(), output);
  }

  // optional string status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomResponse.RoomInfo.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.RoomResponse.RoomInfo)
}

::google::protobuf::uint8* RoomResponse_RoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.RoomResponse.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomResponse.RoomInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string host = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomResponse.RoomInfo.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host(), target);
  }

  // optional string status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.RoomResponse.RoomInfo.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.RoomResponse.RoomInfo)
  return target;
}

size_t RoomResponse_RoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tronol.protobuf.RoomResponse.RoomInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t RoomResponse_RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.RoomResponse.RoomInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string host = 3;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomResponse_RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.RoomResponse.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomResponse_RoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomResponse_RoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.RoomResponse.RoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.RoomResponse.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomResponse_RoomInfo::MergeFrom(const RoomResponse_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.RoomResponse.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoomResponse_RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.RoomResponse.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomResponse_RoomInfo::CopyFrom(const RoomResponse_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.RoomResponse.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomResponse_RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void RoomResponse_RoomInfo::Swap(RoomResponse_RoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomResponse_RoomInfo::InternalSwap(RoomResponse_RoomInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  host_.Swap(&other->host_);
  status_.Swap(&other->status_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomResponse_RoomInfo::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomResponse::kTypeFieldNumber;
const int RoomResponse::kIdFieldNumber;
const int RoomResponse::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomResponse::RoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsRoomResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.RoomResponse)
}
RoomResponse::RoomResponse(const RoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      room_(from.room_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.RoomResponse)
}

void RoomResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

RoomResponse::~RoomResponse() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.RoomResponse)
  SharedDtor();
}

void RoomResponse::SharedDtor() {
}

void RoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomResponse::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomResponse& RoomResponse::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsRoomResponse();
  return *internal_default_instance();
}

RoomResponse* RoomResponse::New(::google::protobuf::Arena* arena) const {
  RoomResponse* n = new RoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.RoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.RoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.RoomResponse.ResponseType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::RoomResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::RoomResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tronol.protobuf.RoomResponse.RoomInfo room = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.RoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.RoomResponse)
  return false;
#undef DO_
}

void RoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.RoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.RoomResponse.ResponseType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .tronol.protobuf.RoomResponse.RoomInfo room = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.RoomResponse)
}

::google::protobuf::uint8* RoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.RoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.RoomResponse.ResponseType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .tronol.protobuf.RoomResponse.RoomInfo room = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->room(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.RoomResponse)
  return target;
}

size_t RoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.RoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .tronol.protobuf.RoomResponse.ResponseType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .tronol.protobuf.RoomResponse.RoomInfo room = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->room_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->room(static_cast<int>(i)));
    }
  }

  // optional int32 id = 2;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.RoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.RoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.RoomResponse)
    MergeFrom(*source);
  }
}

void RoomResponse::MergeFrom(const RoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.RoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_.MergeFrom(from.room_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.RoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomResponse::CopyFrom(const RoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.RoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->room())) return false;
  return true;
}

void RoomResponse::Swap(RoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomResponse::InternalSwap(RoomResponse* other) {
  using std::swap;
  room_.InternalSwap(&other->room_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomResponse::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCommand::kTypeFieldNumber;
const int GameCommand::kTickFieldNumber;
const int GameCommand::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCommand::GameCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsGameCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.GameCommand)
}
GameCommand::GameCommand(const GameCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dir_(from.dir_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.GameCommand)
}

void GameCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tick_));
}

GameCommand::~GameCommand() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.GameCommand)
  SharedDtor();
}

void GameCommand::SharedDtor() {
}

void GameCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCommand::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCommand& GameCommand::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsGameCommand();
  return *internal_default_instance();
}

GameCommand* GameCommand::New(::google::protobuf::Arena* arena) const {
  GameCommand* n = new GameCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.GameCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tick_) -
        reinterpret_cast<char*>(&type_)) + sizeof(tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.GameCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.GameCommand.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::GameCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::GameCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_dir())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dir())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.GameCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.GameCommand)
  return false;
#undef DO_
}

void GameCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.GameCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.GameCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 tick = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tick(), output);
  }

  // repeated int32 dir = 3;
  for (int i = 0, n = this->dir_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dir(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.GameCommand)
}

::google::protobuf::uint8* GameCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.GameCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.GameCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 tick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tick(), target);
  }

  // repeated int32 dir = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->dir_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.GameCommand)
  return target;
}

size_t GameCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.GameCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .tronol.protobuf.GameCommand.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated int32 dir = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dir_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dir_size());
    total_size += data_size;
  }

  // optional int32 tick = 2;
  if (has_tick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tick());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.GameCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.GameCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.GameCommand)
    MergeFrom(*source);
  }
}

void GameCommand::MergeFrom(const GameCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.GameCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dir_.MergeFrom(from.dir_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      tick_ = from.tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.GameCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCommand::CopyFrom(const GameCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.GameCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameCommand::Swap(GameCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCommand::InternalSwap(GameCommand* other) {
  using std::swap;
  dir_.InternalSwap(&other->dir_);
  swap(type_, other->type_);
  swap(tick_, other->tick_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCommand::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameResponse_GameSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResponse_GameSet::kXFieldNumber;
const int GameResponse_GameSet::kYFieldNumber;
const int GameResponse_GameSet::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResponse_GameSet::GameResponse_GameSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsGameResponse_GameSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.GameResponse.GameSet)
}
GameResponse_GameSet::GameResponse_GameSet(const GameResponse_GameSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&x_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.GameResponse.GameSet)
}

void GameResponse_GameSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&x_)) + sizeof(v_));
}

GameResponse_GameSet::~GameResponse_GameSet() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.GameResponse.GameSet)
  SharedDtor();
}

void GameResponse_GameSet::SharedDtor() {
}

void GameResponse_GameSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResponse_GameSet::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResponse_GameSet& GameResponse_GameSet::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsGameResponse_GameSet();
  return *internal_default_instance();
}

GameResponse_GameSet* GameResponse_GameSet::New(::google::protobuf::Arena* arena) const {
  GameResponse_GameSet* n = new GameResponse_GameSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameResponse_GameSet::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.GameResponse.GameSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_) -
        reinterpret_cast<char*>(&x_)) + sizeof(v_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameResponse_GameSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.GameResponse.GameSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.GameResponse.GameSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.GameResponse.GameSet)
  return false;
#undef DO_
}

void GameResponse_GameSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.GameResponse.GameSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 v = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.GameResponse.GameSet)
}

::google::protobuf::uint8* GameResponse_GameSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.GameResponse.GameSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.GameResponse.GameSet)
  return target;
}

size_t GameResponse_GameSet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tronol.protobuf.GameResponse.GameSet)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_v()) {
    // required int32 v = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  return total_size;
}
size_t GameResponse_GameSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.GameResponse.GameSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 v = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResponse_GameSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.GameResponse.GameSet)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResponse_GameSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResponse_GameSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.GameResponse.GameSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.GameResponse.GameSet)
    MergeFrom(*source);
  }
}

void GameResponse_GameSet::MergeFrom(const GameResponse_GameSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.GameResponse.GameSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameResponse_GameSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.GameResponse.GameSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResponse_GameSet::CopyFrom(const GameResponse_GameSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.GameResponse.GameSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResponse_GameSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GameResponse_GameSet::Swap(GameResponse_GameSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResponse_GameSet::InternalSwap(GameResponse_GameSet* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(v_, other->v_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResponse_GameSet::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResponse::kTypeFieldNumber;
const int GameResponse::kSetAtFieldNumber;
const int GameResponse::kUsersFieldNumber;
const int GameResponse::kTickFieldNumber;
const int GameResponse::kWinnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResponse::GameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsGameResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.GameResponse)
}
GameResponse::GameResponse(const GameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      set_at_(from.set_at_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  winner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_winner()) {
    winner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winner_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.GameResponse)
}

void GameResponse::SharedCtor() {
  _cached_size_ = 0;
  winner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tick_));
}

GameResponse::~GameResponse() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.GameResponse)
  SharedDtor();
}

void GameResponse::SharedDtor() {
  winner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResponse::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResponse& GameResponse::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsGameResponse();
  return *internal_default_instance();
}

GameResponse* GameResponse::New(::google::protobuf::Arena* arena) const {
  GameResponse* n = new GameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.GameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_at_.Clear();
  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!winner_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*winner_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tick_) -
        reinterpret_cast<char*>(&type_)) + sizeof(tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.GameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.GameResponse.ResponseType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::GameResponse_ResponseType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::GameResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tronol.protobuf.GameResponse.GameSet set_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_set_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_users()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->users(this->users_size() - 1).data(),
            static_cast<int>(this->users(this->users_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.GameResponse.users");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string winner = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winner().data(), static_cast<int>(this->winner().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tronol.protobuf.GameResponse.winner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.GameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.GameResponse)
  return false;
#undef DO_
}

void GameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.GameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.GameResponse.ResponseType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .tronol.protobuf.GameResponse.GameSet set_at = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_at_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->set_at(static_cast<int>(i)), output);
  }

  // repeated string users = 3;
  for (int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->users(i).data(), static_cast<int>(this->users(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.GameResponse.users");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->users(i), output);
  }

  // optional int32 tick = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tick(), output);
  }

  // optional string winner = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner().data(), static_cast<int>(this->winner().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.GameResponse.winner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->winner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.GameResponse)
}

::google::protobuf::uint8* GameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.GameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.GameResponse.ResponseType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .tronol.protobuf.GameResponse.GameSet set_at = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_at_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_at(static_cast<int>(i)), deterministic, target);
  }

  // repeated string users = 3;
  for (int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->users(i).data(), static_cast<int>(this->users(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.GameResponse.users");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->users(i), target);
  }

  // optional int32 tick = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tick(), target);
  }

  // optional string winner = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner().data(), static_cast<int>(this->winner().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tronol.protobuf.GameResponse.winner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->winner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.GameResponse)
  return target;
}

size_t GameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.GameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .tronol.protobuf.GameResponse.ResponseType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .tronol.protobuf.GameResponse.GameSet set_at = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_at_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->set_at(static_cast<int>(i)));
    }
  }

  // repeated string users = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->users_size());
  for (int i = 0, n = this->users_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->users(i));
  }

  // optional string winner = 5;
  if (has_winner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->winner());
  }

  // optional int32 tick = 4;
  if (has_tick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tick());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.GameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.GameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.GameResponse)
    MergeFrom(*source);
  }
}

void GameResponse::MergeFrom(const GameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.GameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_at_.MergeFrom(from.set_at_);
  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_winner();
      winner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winner_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      tick_ = from.tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.GameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResponse::CopyFrom(const GameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.GameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->set_at())) return false;
  return true;
}

void GameResponse::Swap(GameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResponse::InternalSwap(GameResponse* other) {
  using std::swap;
  set_at_.InternalSwap(&other->set_at_);
  users_.InternalSwap(&other->users_);
  winner_.Swap(&other->winner_);
  swap(type_, other->type_);
  swap(tick_, other->tick_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResponse::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::tronol::protobuf::_Command_default_instance_._instance.get_mutable()->account_ = const_cast< ::tronol::protobuf::AccountCommand*>(
      ::tronol::protobuf::AccountCommand::internal_default_instance());
  ::tronol::protobuf::_Command_default_instance_._instance.get_mutable()->room_ = const_cast< ::tronol::protobuf::RoomCommand*>(
      ::tronol::protobuf::RoomCommand::internal_default_instance());
  ::tronol::protobuf::_Command_default_instance_._instance.get_mutable()->game_ = const_cast< ::tronol::protobuf::GameCommand*>(
      ::tronol::protobuf::GameCommand::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kTypeFieldNumber;
const int Command::kAccountFieldNumber;
const int Command::kRoomFieldNumber;
const int Command::kGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::tronol::protobuf::AccountCommand(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_room()) {
    room_ = new ::tronol::protobuf::RoomCommand(*from.room_);
  } else {
    room_ = NULL;
  }
  if (from.has_game()) {
    game_ = new ::tronol::protobuf::GameCommand(*from.game_);
  } else {
    game_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&account_)) + sizeof(type_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete room_;
  if (this != internal_default_instance()) delete game_;
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsCommand();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_ != NULL);
      account_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(game_ != NULL);
      game_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.Command.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::Command_CommandType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::Command_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tronol.protobuf.AccountCommand account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tronol.protobuf.RoomCommand room = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tronol.protobuf.GameCommand game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.Command.CommandType type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .tronol.protobuf.AccountCommand account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->account_, output);
  }

  // optional .tronol.protobuf.RoomCommand room = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->room_, output);
  }

  // optional .tronol.protobuf.GameCommand game = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->game_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.Command.CommandType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .tronol.protobuf.AccountCommand account = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->account_, deterministic, target);
  }

  // optional .tronol.protobuf.RoomCommand room = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->room_, deterministic, target);
  }

  // optional .tronol.protobuf.GameCommand game = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->game_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .tronol.protobuf.Command.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .tronol.protobuf.AccountCommand account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->account_);
    }

    // optional .tronol.protobuf.RoomCommand room = 3;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->room_);
    }

    // optional .tronol.protobuf.GameCommand game = 4;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->game_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_account()->::tronol::protobuf::AccountCommand::MergeFrom(from.account());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_room()->::tronol::protobuf::RoomCommand::MergeFrom(from.room());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_game()->::tronol::protobuf::GameCommand::MergeFrom(from.game());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_account()) {
    if (!this->account_->IsInitialized()) return false;
  }
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  if (has_game()) {
    if (!this->game_->IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(account_, other->account_);
  swap(room_, other->room_);
  swap(game_, other->game_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::tronol::protobuf::_Response_default_instance_._instance.get_mutable()->account_ = const_cast< ::tronol::protobuf::AccountResponse*>(
      ::tronol::protobuf::AccountResponse::internal_default_instance());
  ::tronol::protobuf::_Response_default_instance_._instance.get_mutable()->room_ = const_cast< ::tronol::protobuf::RoomResponse*>(
      ::tronol::protobuf::RoomResponse::internal_default_instance());
  ::tronol::protobuf::_Response_default_instance_._instance.get_mutable()->game_ = const_cast< ::tronol::protobuf::GameResponse*>(
      ::tronol::protobuf::GameResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kTypeFieldNumber;
const int Response::kAccountFieldNumber;
const int Response::kRoomFieldNumber;
const int Response::kGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tron_2eproto::InitDefaultsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tronol.protobuf.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::tronol::protobuf::AccountResponse(*from.account_);
  } else {
    account_ = NULL;
  }
  if (from.has_room()) {
    room_ = new ::tronol::protobuf::RoomResponse(*from.room_);
  } else {
    room_ = NULL;
  }
  if (from.has_game()) {
    game_ = new ::tronol::protobuf::GameResponse(*from.game_);
  } else {
    game_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tronol.protobuf.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&account_)) + sizeof(type_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:tronol.protobuf.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete room_;
  if (this != internal_default_instance()) delete game_;
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  ::protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  ::protobuf_tron_2eproto::InitDefaultsResponse();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:tronol.protobuf.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_ != NULL);
      account_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(game_ != NULL);
      game_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tronol.protobuf.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tronol.protobuf.Response.ResponseType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tronol::protobuf::Response_ResponseType_IsValid(value)) {
            set_type(static_cast< ::tronol::protobuf::Response_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tronol.protobuf.AccountResponse account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tronol.protobuf.RoomResponse room = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tronol.protobuf.GameResponse game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tronol.protobuf.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tronol.protobuf.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tronol.protobuf.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.Response.ResponseType type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .tronol.protobuf.AccountResponse account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->account_, output);
  }

  // optional .tronol.protobuf.RoomResponse room = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->room_, output);
  }

  // optional .tronol.protobuf.GameResponse game = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->game_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tronol.protobuf.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tronol.protobuf.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .tronol.protobuf.Response.ResponseType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .tronol.protobuf.AccountResponse account = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->account_, deterministic, target);
  }

  // optional .tronol.protobuf.RoomResponse room = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->room_, deterministic, target);
  }

  // optional .tronol.protobuf.GameResponse game = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->game_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tronol.protobuf.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tronol.protobuf.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .tronol.protobuf.Response.ResponseType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .tronol.protobuf.AccountResponse account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->account_);
    }

    // optional .tronol.protobuf.RoomResponse room = 3;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->room_);
    }

    // optional .tronol.protobuf.GameResponse game = 4;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->game_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tronol.protobuf.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tronol.protobuf.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tronol.protobuf.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tronol.protobuf.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_account()->::tronol::protobuf::AccountResponse::MergeFrom(from.account());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_room()->::tronol::protobuf::RoomResponse::MergeFrom(from.room());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_game()->::tronol::protobuf::GameResponse::MergeFrom(from.game());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tronol.protobuf.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tronol.protobuf.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_account()) {
    if (!this->account_->IsInitialized()) return false;
  }
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  if (has_game()) {
    if (!this->game_->IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  swap(account_, other->account_);
  swap(room_, other->room_);
  swap(game_, other->game_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_tron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace tronol

// @@protoc_insertion_point(global_scope)
